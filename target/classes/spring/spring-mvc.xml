<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xmlns:context="http://www.springframework.org/schema/context"
	xmlns:aop="http://www.springframework.org/schema/aop" xmlns:mvc="http://www.springframework.org/schema/mvc"
	xsi:schemaLocation="http://www.springframework.org/schema/beans
         http://www.springframework.org/schema/beans/spring-beans-4.0.xsd
         http://www.springframework.org/schema/context
         http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/aop 
         http://www.springframework.org/schema/aop/spring-aop-4.0.xsd
         http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.0.xsd
         http://www.springframework.org/schema/mvc  http://www.springframework.org/schema/mvc/spring-mvc-4.0.xsd">

	<context:annotation-config />
	
	<!-- springMVC对静态资源请求的处理 -->
	<mvc:annotation-driven/> 
	<mvc:default-servlet-handler />

	<!-- 用于将对象转换为 JSON -->
	<bean id="stringConverter"
		class="org.springframework.http.converter.StringHttpMessageConverter">
		<property name="supportedMediaTypes">
			<list>
				<value>text/plain;charset=UTF-8</value>
				<value>text/html;charset=UTF-8</value>
				<value>application/json;charset=UTF-8</value>
			</list>
		</property>
	</bean>
	<bean id="jsonConverter"
		class="org.springframework.http.converter.json.MappingJackson2HttpMessageConverter"></bean>
	<bean
		class="org.springframework.web.servlet.mvc.annotation.AnnotationMethodHandlerAdapter">
		<property name="messageConverters">
			<list>
				<ref bean="stringConverter" />
				<ref bean="jsonConverter" />
			</list>
		</property>
	</bean>

	<!-- 通知spring使用cglib而不是jdk的来生成代理方法 AOP可以拦截到Controller -->
	<aop:aspectj-autoproxy proxy-target-class="true" />

	<bean id="viewResolver"
		class="org.springframework.web.servlet.view.InternalResourceViewResolver">
		<!-- <property name="prefix" value="/WEB-INF/jsps/" /> -->
		<property name="prefix" value="/WEB-INF/pages/" />
		<property name="suffix" value=".jsp"></property>
	</bean>

	<!-- 组件扫描 -->
	<context:component-scan base-package="com.diverhome.*">
		<context:exclude-filter type="annotation"
			expression="org.springframework.stereotype.Service" />
	</context:component-scan>
	
	<!-- 拦截器 -->
	<mvc:interceptors>
		<mvc:interceptor>
			<!-- 只对含有manage的的url进行拦截，含有rest的url是提供微信端调用 -->
			<mvc:mapping path="/**/manage/**" />
			<bean class="com.diverhome.interceptor.SessionInterceptor">
				<!-- 不需要session验证的地址 -->
				<property name="uncheckUrls">
					<list>
						<value>/diverhome/manage/login</value>
						<value>/diverhome/manage/login_login</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
		<!-- 微信请求拦截器 -->
		<mvc:interceptor>
			<mvc:mapping path="/**/rest/**" />
			<bean class="com.diverhome.interceptor.RestInterceptor">
				<!-- 不需要session验证的地址 -->
				<property name="uncheckUrls">
					<list>
						<!--<value>/diverhome/rest/wechatLogin</value>-->
						<value>/diverhome/rest/getProductList</value>
						<value>/diverhome/rest/getProductById</value>
						<value>/diverhome/rest/getWeChatVerifyCode</value>
						<value>/diverhome/rest/validopenid</value>
					</list>
				</property>
			</bean>
		</mvc:interceptor>
	</mvc:interceptors>
</beans>